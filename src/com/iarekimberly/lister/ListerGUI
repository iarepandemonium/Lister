package com.iarekimberly.lister;


import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.*;

public class ListerGUI extends JFrame{
	int number;
	String word;
	private String word2;

	/**
	 * 
	 */
	private static final long serialVersionUID = 5472541314486368786L;
	
	public ListerGUI(){

	}
	
	Dimension textarea = new Dimension(220,200);
	String text1 = "";
	String text2 = "";
	String result = "";
	ArrayList<String> filetostring = new ArrayList<String>();
	ArrayList<String> filetostring2 = new ArrayList<String>();
	ArrayList<String> filetostring3 = new ArrayList<String>();
	ArrayList<String> doublechecker = new ArrayList<String>();

	
	public void BuildGui(){
		
		JPanel basic = new JPanel();
		basic.setLayout(new BoxLayout(basic, BoxLayout.Y_AXIS));
		add(basic);
		
		JPanel topPanel = new JPanel(new BorderLayout(0,0));
		topPanel.setBackground(Color.WHITE);
		topPanel.setMaximumSize(new Dimension(450,0));
		JLabel instruct = new JLabel("<html>Sort Those Lists!</html>");
		instruct.setBorder(BorderFactory.createEmptyBorder(5, 25, 5, 0));
		topPanel.add(instruct);

        JSeparator separator = new JSeparator();
        separator.setForeground(Color.GRAY);

        topPanel.add(separator, BorderLayout.SOUTH);

        basic.add(topPanel);
        
        JPanel data = new JPanel(new FlowLayout());
        data.setBorder(BorderFactory.createEmptyBorder(5, 10, 10, 10));
        final JTextPane text1 = new JTextPane();
        text1.setContentType("text");
        JScrollPane sp1 = TextAreaDefaults(text1);
        data.add(sp1);
        
        
        final JTextPane text2 = new JTextPane();
        JScrollPane sp2 = TextAreaDefaults(text2);
        data.add(sp2);
        basic.add(data);
        

        JPanel textPanel = new JPanel(new BorderLayout());
        textPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
        final JTextPane pane = new JTextPane();
        


        //JPanel boxPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 3));
        JPanel boxPanel = new JPanel(new GridLayout(0,3));
        boxPanel.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        ButtonGroup bg = new ButtonGroup();
        JRadioButton box1 = new JRadioButton("Find Dupes");
        JRadioButton box2 = new JRadioButton("Remove Dupes");
        JRadioButton box3 = new JRadioButton("Remove Dupes");
        JRadioButton box4 = new JRadioButton("Find Missing");
        JRadioButton box5 = new JRadioButton("Find Dupes");
        JRadioButton box6 = new JRadioButton("Remove Dupes");
        JRadioButton box7 = new JRadioButton("Remove Dupes");
        JRadioButton box8 = new JRadioButton("Find Missing");
        JRadioButton box9 = new JRadioButton("Find Dupes");
        JRadioButton box10 = new JRadioButton("Find Dupes");
        JRadioButton box11 = new JRadioButton("Return One");
        JRadioButton box12 = new JRadioButton("Two Lines");
        JRadioButton box13 = new JRadioButton("Second Word");
        JLabel label1 = new JLabel("String One:");
        final JTextField boxbox = new JTextField(10);
        JLabel label2 = new JLabel("String Two:");
        final JTextField boxbox2 = new JTextField(10);
        JLabel Single = new JLabel("Single List");
        JLabel Double = new JLabel("Double List");
        JLabel WordCat = new JLabel("Word");
        JLabel WordCat2 = new JLabel("Word");
        JLabel LineCat = new JLabel("Line");
        JLabel LineCat2 = new JLabel("Line");
        JLabel empty1 = new JLabel("");
        JLabel empty2 = new JLabel("");
        JLabel empty3 = new JLabel("");
        JLabel empty4 = new JLabel("");
        JLabel empty5 = new JLabel("");
        JLabel empty6 = new JLabel("");

        bg.add(box1);
        bg.add(box2);
        bg.add(box3);
        bg.add(box4);
        bg.add(box5);
        bg.add(box6);
        bg.add(box7);
        bg.add(box8);
        bg.add(box9);
        bg.add(box10);
        bg.add(box11);
        bg.add(box12);
        bg.add(box13);
        
        JPanel gridpanel = new JPanel(new GridLayout(0,3));
        gridpanel.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        //single top
        gridpanel.add(empty1);
        empty1.setBorder(BorderFactory.createMatteBorder(2, 0, 2, 0,Color.black));
        gridpanel.add(Single);
        Single.setBorder(BorderFactory.createMatteBorder(2, 0, 2, 0,Color.black));
        gridpanel.add(empty2);
        empty2.setBorder(BorderFactory.createMatteBorder(2, 0, 2, 0,Color.black));
        
        
        //word single section
        gridpanel.add(new JLabel(""));
        gridpanel.add(WordCat);
        WordCat.setBorder(BorderFactory.createMatteBorder(0, 2, 2, 2,Color.black));
        gridpanel.add(new JLabel(""));
        
        gridpanel.add(box1);
        gridpanel.add(box2);
        gridpanel.add(box12);
        
        gridpanel.add(box13);
        gridpanel.add(empty5);
        gridpanel.add(empty6);
        
        
        //line single section
        gridpanel.add(new JLabel(""));
        gridpanel.add(LineCat);
        LineCat.setBorder(BorderFactory.createMatteBorder(2, 2, 2, 2,Color.black));
        gridpanel.add(new JLabel(""));
        
        gridpanel.add(box5);
        gridpanel.add(box6);
        gridpanel.add(box11);
        
        
        //double top
        gridpanel.add(empty3);
        empty3.setBorder(BorderFactory.createMatteBorder(2, 0, 2, 0,Color.black));
        gridpanel.add(Double);
        Double.setBorder(BorderFactory.createMatteBorder(2, 0, 2, 0,Color.black));
        gridpanel.add(empty4);
        empty4.setBorder(BorderFactory.createMatteBorder(2, 0, 2, 0,Color.black));
        
        
        //word double section
        gridpanel.add(new JLabel(""));
        gridpanel.add(WordCat2);
        WordCat2.setBorder(BorderFactory.createMatteBorder(0, 2, 2, 2,Color.black));
        gridpanel.add(new JLabel(""));
        
        gridpanel.add(box9);
        gridpanel.add(box3);
        gridpanel.add(box4);
        
        
        //line double section
        gridpanel.add(new JLabel(""));
        gridpanel.add(LineCat2);
        LineCat2.setBorder(BorderFactory.createMatteBorder(2, 2, 2, 2,Color.black));
        gridpanel.add(new JLabel(""));
        
        gridpanel.add(box10);
        gridpanel.add(box7);
        gridpanel.add(box8);
        
        gridpanel.add(new JLabel(""));
        gridpanel.add(new JLabel(""));
        gridpanel.add(new JLabel(""));
        
        
        Single.setHorizontalAlignment(JLabel.CENTER);
        WordCat.setHorizontalAlignment(JLabel.CENTER);
        LineCat.setHorizontalAlignment(JLabel.CENTER);
        Double.setHorizontalAlignment(JLabel.CENTER);
        WordCat2.setHorizontalAlignment(JLabel.CENTER);
        LineCat2.setHorizontalAlignment(JLabel.CENTER);
        


        
        JPanel Label1panel = new JPanel(new GridLayout(0,4));
        Label1panel.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 30));
        label2.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));
        Label1panel.add(label1);
        Label1panel.add(boxbox);
        Label1panel.add(label2);
        Label1panel.add(boxbox2);

        basic.add(gridpanel);
        basic.add(Label1panel);
        




        pane.setContentType("text");
        pane.setEditable(false);
        pane.setPreferredSize(new Dimension(40,50));
        JScrollPane jscroll = new JScrollPane(pane,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        textPanel.add(jscroll);

        basic.add(textPanel);
        
        box1.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				setword(boxbox.getText());
				setword2(boxbox2.getText());
				pane.setText(removeDuplicates(text1.getText()));
				filetostring.clear();
				filetostring2.clear();
				filetostring3.clear();
				doublechecker.clear();
				
			}
        	
        });
        
        box2.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				setword(boxbox.getText());
				setword2(boxbox2.getText());
				pane.setText(PrintListSingle(text1.getText()));
				filetostring.clear();
				filetostring2.clear();
				filetostring3.clear();
				doublechecker.clear();
				
			}
        	
        });
        box3.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				setword(boxbox.getText());
				setword2(boxbox2.getText());
				pane.setText(PrintListRMVDouble(text1.getText(), text2.getText()));
				filetostring.clear();
				filetostring2.clear();
				filetostring3.clear();
				doublechecker.clear();
				
			}
        	
        });
        box4.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				setword(boxbox.getText());
				setword2(boxbox2.getText());
				pane.setText(FindMissing(text1.getText(), text2.getText()));
				filetostring.clear();
				filetostring2.clear();
				filetostring3.clear();
				doublechecker.clear();
				
			}
        	
        });
        box5.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				setword(boxbox.getText());
				setword2(boxbox2.getText());
				pane.setText(removeDuplicatesLine(text1.getText()));
				filetostring.clear();
				filetostring2.clear();
				filetostring3.clear();
				doublechecker.clear();
				
			}
        	
        });
        
        box6.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				setword(boxbox.getText());
				setword2(boxbox2.getText());
				pane.setText(PrintListSingleLine(text1.getText()));
				filetostring.clear();
				filetostring2.clear();
				filetostring3.clear();
				doublechecker.clear();
				
			}
        	
        });
        box7.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				setword(boxbox.getText());
				setword2(boxbox2.getText());
				pane.setText(PrintListRMVDoubleLine(text1.getText(), text2.getText()));
				filetostring.clear();
				filetostring2.clear();
				filetostring3.clear();
				doublechecker.clear();
				
			}
        	
        });
        box8.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				setword(boxbox.getText());
				setword2(boxbox2.getText());
				pane.setText(FindMissingLine(text1.getText(), text2.getText()));
				filetostring.clear();
				filetostring2.clear();
				filetostring3.clear();
				doublechecker.clear();
				
			}
        	
        });
        box9.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				setword(boxbox.getText());
				setword2(boxbox2.getText());
				pane.setText(FindCopy(text1.getText(), text2.getText()));
				filetostring.clear();
				filetostring2.clear();
				filetostring3.clear();
				doublechecker.clear();
				
			}
        	
        });
        box10.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				setword(boxbox.getText());
				setword2(boxbox2.getText());
				pane.setText(FindCopyLine(text1.getText(), text2.getText()));
				filetostring.clear();
				filetostring2.clear();
				filetostring3.clear();
				doublechecker.clear();
				
			}
        	
        });
        box11.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				setword(boxbox.getText());
				setword2(boxbox2.getText());
				pane.setText(returnOneFact(text1.getText()));
				filetostring.clear();
				filetostring2.clear();
				filetostring3.clear();
				doublechecker.clear();
				
			}
        	
        });
        box12.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				setword(boxbox.getText());
				setword2(boxbox2.getText());
				pane.setText(TwoLines(text1.getText()));
				filetostring.clear();
				filetostring2.clear();
				filetostring3.clear();
				doublechecker.clear();
				
			}
        	
        });
        box13.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				setword(boxbox.getText());
				setword2(boxbox2.getText());
				pane.setText(SecondWordList(text1.getText()));
				filetostring.clear();
				filetostring2.clear();
				filetostring3.clear();
				doublechecker.clear();
				
			}
        	
        });
        

		setTitle("Lister: The Little Handy Tool That Sorts Lists");
        setSize(new Dimension(500, 800));
        setResizable(false);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setVisible(true);
	}
	
	public JScrollPane TextAreaDefaults(JTextPane jtextarea){
		jtextarea.setPreferredSize(textarea);
		jtextarea.setBorder(BorderFactory.createLineBorder(Color.black));
		return new JScrollPane(jtextarea,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
	}

	
	@SuppressWarnings("resource")
	public String removeDuplicates(String words1){
		Scanner Grey = new Scanner(words1);
		StringBuilder sb = new StringBuilder();
		try{setnumber(Integer.parseInt(getword()));}
        catch(NumberFormatException e){}
		int anumber = getnumber();
		while(Grey.hasNext()){
			String i = Grey.next();
			doublechecker.add(i);
			if(!filetostring.contains(i)){
				filetostring.add(i);
			}
			else{
            	int count = 0;
            	for(String x : doublechecker){
            	if(x.equals(i)){
            		count++;
            	}
            	}
            	if(count > anumber){
            		sb.append("Found: " + i + " x" + count + "\n");
            	}
            }
		}
		return sb.toString();
	}
	
	@SuppressWarnings("resource")
	public String removeDuplicatesLine(String words1){
		Scanner Grey = new Scanner(words1);
		StringBuilder sb = new StringBuilder();
		try{setnumber(Integer.parseInt(getword()));}
        catch(NumberFormatException e){}
		int anumber = getnumber();
		while(Grey.hasNextLine()){
			String i = Grey.nextLine();
			doublechecker.add(i);
			if(!filetostring.contains(i)){
				filetostring.add(i);
				if(i.length() < 1){filetostring.remove(i);}
			}
			else{
            	int count = 0;
            	for(String x : doublechecker){
            	if(x.equals(i)){
            		count++;
            	}
            	}
            	if(count > anumber){
            		sb.append("Found: " + i + " x" + count + "\n");
            	}
            }
		}
		return sb.toString();
	}

	@SuppressWarnings("resource")
	public String PrintListSingle(String words1){
		Scanner Grey = new Scanner(words1);
		StringBuilder sb = new StringBuilder();
		while (Grey.hasNext()) {
            String i = Grey.next();
            if(!filetostring.contains(i) 
            		){
            	filetostring.add(i);
            }
	}
		for(int i = 0; i < filetostring.size(); i++){
			sb.append(filetostring.get(i) + "\n");
		}
		return sb.toString();
		
	
}
	
	@SuppressWarnings("resource")
	public String PrintListSingleLine(String words1){
		Scanner Grey = new Scanner(words1);
		StringBuilder sb = new StringBuilder();
		while (Grey.hasNextLine()) {
            String i = Grey.nextLine();
            if(!filetostring.contains(i) 
            		){
            	filetostring.add(i);
            }
	}
		for(int i = 0; i < filetostring.size(); i++){
			sb.append(filetostring.get(i) + "\n");
		}
		return sb.toString();
		
	
}
	@SuppressWarnings("resource")
	public String PrintListRMVDouble(String words1, String words2){
		Scanner Grey = new Scanner(words1);
		Scanner Red = new Scanner(words2);
		StringBuilder sb = new StringBuilder();
		while (Grey.hasNext()) {
            String i = Grey.next();
            if(!filetostring.contains(i) 
            		){
            	filetostring.add(i);
            }
	}
		while (Red.hasNext()) {
            String i = Red.next();
            filetostring.remove(i);
      }
		for(int i = 0; i < filetostring.size(); i++){
			sb.append(filetostring.get(i) + "\n");
		}
		return sb.toString();
	}
	
	@SuppressWarnings("resource")
	public String PrintListRMVDoubleLine(String words1, String words2){
		Scanner Grey = new Scanner(words1);
		Scanner Red = new Scanner(words2);
		StringBuilder sb = new StringBuilder();
		while (Grey.hasNextLine()) {
            String i = Grey.nextLine();
            if(!filetostring.contains(i) 
            		){
            	filetostring.add(i);
            }
	}
		while (Red.hasNextLine()) {
            String i = Red.nextLine();
            filetostring.remove(i);
      }
		for(int i = 0; i < filetostring.size(); i++){
			sb.append(filetostring.get(i) + "\n");
		}
		return sb.toString();
	}
	
	@SuppressWarnings("resource")
	public String FindMissing(String words1, String words2){
		Scanner Grey = new Scanner(words1);
		Scanner Red = new Scanner(words2);
		StringBuilder sb = new StringBuilder();
		while (Grey.hasNext()) {
            String i = Grey.next();
            if(!filetostring.contains(i) 
            		){
            	filetostring.add(i);
            }
	}
		while (Red.hasNext()) {
            String i = Red.next();
            if(!filetostring.contains(i)){
            	sb.append("Found: " + i +"\n");
            	}
      }
		return sb.toString();
	}
	
	@SuppressWarnings("resource")
	public String FindMissingLine(String words1, String words2){
		Scanner Grey = new Scanner(words1);
		Scanner Red = new Scanner(words2);
		StringBuilder sb = new StringBuilder();
		while (Grey.hasNextLine()) {
            String i = Grey.nextLine();
            if(!filetostring.contains(i) 
            		){
            	filetostring.add(i);
            }
	}
		while (Red.hasNextLine()) {
            String i = Red.nextLine();
            if(!filetostring.contains(i)){
            	sb.append("Found: " + i +"\n");
            	}
      }
		return sb.toString();
	}
	
	@SuppressWarnings("resource")
	public String FindCopy(String words1, String words2){
		Scanner Grey = new Scanner(words1);
		Scanner Red = new Scanner(words2);
		StringBuilder sb = new StringBuilder();
		while (Grey.hasNext()) {
            String i = Grey.next();
            if(!filetostring.contains(i) 
            		){
            	filetostring.add(i);
            }
	}
		while (Red.hasNext()) {
            String i = Red.next();
            if(filetostring.contains(i)){
            	sb.append("Dup. Found: " + i +"\n");
            	}
      }
		return sb.toString();
	}
	
	@SuppressWarnings("resource")
	public String FindCopyLine(String words1, String words2){
		Scanner Grey = new Scanner(words1);
		Scanner Red = new Scanner(words2);
		StringBuilder sb = new StringBuilder();
		while (Grey.hasNextLine()) {
            String i = Grey.nextLine();
            if(!filetostring.contains(i) 
            		){
            	filetostring.add(i);
            }
	}
		while (Red.hasNextLine()) {
            String i = Red.nextLine();
            if(filetostring.contains(i)){
            	sb.append("Dup. Found: " + i +"\n");
            	}
      }
		return sb.toString();
	}
	
	@SuppressWarnings("resource")
	public String returnOneFact(String words1){
		Scanner Grey = new Scanner(words1);
		StringBuilder sb = new StringBuilder();
		try{setnumber(Integer.parseInt(getword()));}
        catch(NumberFormatException e){}
		int anumber = getnumber();
		while(Grey.hasNextLine()){
			String i = Grey.nextLine();
			String[] split = i.split(" ");
			String result = split[anumber];
			sb.append(result +"\n");
            	}
           
		return sb.toString();
	}
	
	@SuppressWarnings("resource")
	public String TwoLines(String words1){
		Scanner Grey = new Scanner(words1);
		String word = getword();
		String word2 = getword2();
		StringBuilder sb = new StringBuilder();
		while (Grey.hasNext()) {
            String i = Grey.next();
            String j = "";
            try{j = Grey.next();}catch(Exception e){}
            if(!filetostring.contains(i) && j.equalsIgnoreCase(word) 
            		){
            	filetostring.add(i);
            }
            if(!filetostring2.contains(i) && j.equalsIgnoreCase(word2) 
            		){
            	filetostring2.add(i);
            }
	}
		for(String text2 : filetostring2){
			if(!filetostring.contains(text2)){
				sb.append("Missing " + word + ": " + text2 + "\n");
			}
			}
		for(String text : filetostring){
			if(!filetostring2.contains(text)){
				sb.append("Missing " + word2 + ": " + text + "\n");
			}
			}
		
		return sb.toString();
	}
	
	@SuppressWarnings("resource")
	public String SecondWordList(String words1){
		Scanner Grey = new Scanner(words1);
		String word = getword();
		StringBuilder sb = new StringBuilder();
		while (Grey.hasNext()) {
            String i = Grey.next();
            String j = "";
            try{j = Grey.next();}catch(Exception e){}
            if(!filetostring.contains(i) && j.equalsIgnoreCase(word) 
            		){
            	filetostring.add(i);
            	sb.append(i + "\n");
            }
	}
		
		return sb.toString();
	}
	
	public Integer getnumber(){
		return this.number;
	}
	private String getword() {
		return this.word;
	}
	private void setword(String word) {
		this.word = word;
	}
	private String getword2() {
		return this.word2;
	}
	private void setword2(String word) {
		this.word2 = word;
	}
	public void setnumber(Integer number){
		this.number = number;
	}
}
